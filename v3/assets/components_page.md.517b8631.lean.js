import{_ as a,o as l,c as p,z as s,a as n,O as o}from"./chunks/framework.703dab35.js";const q=JSON.parse('{"title":"scroll-page 长列表分页组件","description":"","frontmatter":{},"headers":[],"relativePath":"components/page.md","filePath":"components/page.md"}'),e={name:"components/page.md"},t=s("h1",{id:"scroll-page-长列表分页组件",tabindex:"-1"},[n("scroll-page 长列表分页组件 "),s("a",{class:"header-anchor",href:"#scroll-page-长列表分页组件","aria-label":'Permalink to "scroll-page 长列表分页组件"'},"​")],-1),c=s("h2",{id:"介绍",tabindex:"-1"},[n("介绍 "),s("a",{class:"header-anchor",href:"#介绍","aria-label":'Permalink to "介绍"'},"​")],-1),r=s("p",null,"长列表解决方案：将数据分为多个 page 页面(如下图)。每个 page 页面包含列表项 item。计算每个 page 的高度。当 page1 已加载完并且已经划过到可视区上面时，将该 page1 设为当前的 page 高度，并删除里面的列表项 item。完成用一个空的 page 进行占位。这样就减少了过多的列表项 dom。当页面向下滚动时。page1 又进入可视区时，将列表项 item 再还原回来。",-1),F=s("p",null,"为了保证滚动时的连贯性。我们保存了当前可视区及可视区上下两个 page 页面中的列表项。其余 page 中的列表项全部删除，只有滚动到时才显示。这样就保证页面中有且只有三个 page 中有列表项。其余均是空白占位区域。",-1),D=["src"],y=["src"],C=o("",8);function i(A,d,g,u,E,h){return l(),p("div",null,[t,c,r,F,s("img",{src:"/images/page1.jpg",alt:"示例图一"},null,8,D),s("img",{src:"/images/page2.png",alt:"示例图二"},null,8,y),C])}const f=a(e,[["render",i]]);export{q as __pageData,f as default};
